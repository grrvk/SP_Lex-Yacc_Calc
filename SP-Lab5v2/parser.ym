%{
    #include<stdio.h>
    int yylex(void);
    int yyerror(const char *s);
    int successful_parsing = 1;
%}

%token int_const char_const float_const id_s string storage_const type_const sym_const sym_struct DEFINE
%token LIST IF FOR DO WHILE BREAK RETURN SIZEOF ASSIGN_PUNCTUATION UNARY or_const and_const equality_const move_const weak_comparison_const inc_dec_const
%token ELSE HEADER

%left '+' '-'
%left '*' '/'

%start program

%%
program                     : HEADER program
                            | DEFINE abstract_expression program
                            | external_declaration
                            ;
external_declaration        : function_definition
                            | function_definition external_declaration
                            | statements_compound
                            | statements_compound external_declaration
                            | declaration_compound 
                            | declaration_compound external_declaration
                            ;
abstract_expression         : id_s
                            | consts
                            | string
                            | '(' expression ')'
                            ;
function_definition         : decl_specifier declarator declaration_compound internal_compound_statements
                            | declarator declaration_compound internal_compound_statements
                            | decl_specifier declarator    internal_compound_statements
                            | declarator internal_compound_statements
                            | declarator ';'
                            ;
declaration                 : decl_specifier init_declarator_list ';'
                            | decl_specifier ';'
                            ;
declaration_compound        : declaration
                            | declaration_compound declaration
                            ;
decl_specifier              : storage_const decl_specifier
                            | storage_const
                            | type_specifier decl_specifier
                            | type_specifier
                            | sym_const decl_specifier
                            | sym_const
                            | LIST '<' type_specifier '>'
                            ;
custom_class_specifier      : sym_struct id_s '{' struct_decl_list '}'
                            | sym_struct '{' struct_decl_list '}'
                            | sym_struct id_s
                            ;
type_specifier              : type_const
                            | custom_class_specifier
                            ;
struct_decl_list            : struct_decl
                            | struct_decl_list struct_decl
                            ;
struct_decl                 : spec_qualifier_list struct_declarator_list ';'
                            ;
init_declarator_list        : init_declarator
                            | init_declarator_list ',' init_declarator
                            ;
init_declarator             : declarator
                            | declarator '=' initializer
                            ;
spec_qualifier_list         : type_specifier spec_qualifier_list
                            | type_specifier
                            | sym_const spec_qualifier_list
                            | sym_const
                            ;
struct_declarator_list      : declarator
                            | struct_declarator_list ',' declarator
                            ;
declarator                  : pointer direct_declarator
                            | direct_declarator
                            ;
direct_declarator            : id_s
                            | '(' declarator ')'
                            | direct_declarator '[' conditional_exp ']'
                            | direct_declarator '['    ']'
                            | direct_declarator '(' param_list ')'
                            | direct_declarator '(' id_list ')'
                            | direct_declarator '('    ')'
                            ;
pointer                     : '*'
                            | '*' sym_const pointer
                            | '*' pointer
                            ;
param_list                  : param_decl
                            | param_list ',' param_decl
                            ;
param_decl                  : decl_specifier declarator
                            | decl_specifier pointer
                            | decl_specifier
                            ;
id_list                     : id_s
                            | id_list ',' id_s
                            ;
initializer                 : assignment_exp
                            | '{' initializer_list '}'
                            ;
initializer_list            : initializer
                            | initializer_list ',' initializer
                            ;
type_name                   : spec_qualifier_list pointer
                            | spec_qualifier_list
                            ;
internal_compound_statements  : '{' declaration_compound statements_compound '}'
                            | '{' statements_compound '}'
                            | '{' declaration_compound    '}'
                            | '{' '}'
                            ;
statement                   : exprssion_statement
                            | internal_compound_statements
                            | if_statement
                            | loop_statement
                            | end_process_statement
                            ;
exprssion_statement         : expression ';'
                            | ';'
                            ;
statements_compound         : statement
                            | statements_compound statement
                            ;
if_statement                : IF '(' expression ')' statement
                            | IF '(' expression ')' statement ELSE statement
                            ;
loop_statement              : WHILE '(' expression ')' statement
                            | DO statement WHILE '(' expression ')' ';'
                            | FOR '(' expression ';' expression ';' expression ')' statement
                            ;
end_process_statement       : BREAK ';'
                            | RETURN expression ';'
                            | RETURN ';'
                            ;
expression                  : assignment_exp
                            | expression ',' assignment_exp
                            |
                            ;
assignment_exp              : conditional_exp
                            | singular_expression assignment_operator assignment_exp
                            ;
assignment_operator         : ASSIGN_PUNCTUATION
                            | '='
                            ;
conditional_exp             : logical_compound_expession
                            | logical_compound_expession '?' expression ':' conditional_exp
                            ;
logical_compound_expession  : logical_expression
                            | logical_compound_expession or_const logical_expression
                            | logical_compound_expession and_const logical_expression
                            ;
logical_expression          : relational_expression
                            | logical_expression equality_const relational_expression
                            ;
relational_expression       : move_expression
                            | relational_expression '<' move_expression
                            | relational_expression '>' move_expression
                            | relational_expression weak_comparison_const move_expression
                            ;
move_expression             : operation_expression
                            | move_expression move_const move_expression
                            ;
operation_expression        : singular_expression
                            | expression '+' singular_expression
                            | expression '-' singular_expression
                            | expression '*' singular_expression
                            | expression '/' singular_expression
                            | expression '%' singular_expression
                            ;
singular_expression         : secondary_expression
                            | inc_dec_const singular_expression
                            | UNARY singular_expression
                            | SIZEOF singular_expression
                            | SIZEOF '(' type_name ')'
                            ;

secondary_expression        : abstract_expression
                            | spec_qualifier_list declarator
                            | secondary_expression '[' expression ']'
                            | secondary_expression '(' argument_compound ')'
                            | secondary_expression '(' ')'
                            | secondary_expression '.' id_s
                            | secondary_expression inc_dec_const
                            ;
argument_compound           : assignment_exp
                            | assignment_exp ',' argument_compound 
                            ;
consts                      : int_const
                            | char_const
                            | float_const
                            ;
%%

int main(void)
{
    yyparse();
    if(successful_parsing)
        printf("Parsing Successful\n");
    return 0;
}

int yyerror(const char *msg)
{
    extern int yylineno;
    printf("Error in line number %d: %s\n",yylineno,msg);
    successful_parsing = 0;
    return 0;
}

