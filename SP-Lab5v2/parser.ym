%{
#define YYSTYPE float
    #include <stdio.h>
    #include<math.h>
    int yylex(void);
    void yyerror(char *);
%}

%token INTEGER
%token SIN COS TAN COT SEC COSEC LOG LN ASEC ASIN ACOS ATAN ACOSEC ACOT SQRT PHI EXP

%left '(' ')'
%left '+' '-'
%left '*' '/'
%right '^'

%%

program:
    | program expr '\n' { printf("%f\n",$2); }
        ;
expr:
    INTEGER
    | PHI { $$ = M_PI; }
    | EXP { $$ = M_E; }
    | expr '+' expr           { $$ = $1 + $3; }
    | expr '-' expr           { $$ = $1 - $3; }
    | expr '/' expr           { $$ = $1 / $3;}
    | '('expr')'            { $$ = $2; }
    | '-'expr                { $$ = (-1) * $2; }
    | expr '*' expr           { $$ = $1 * $3; }
    | expr '^' expr           { $$ = pow($1,$3); }
    | expr '%' expr           { $$ = (int)$1 % (int)$3; }
    | SIN'('expr')' {$$ = sin($3); }
    | COS'('expr')' {$$ = cos($3); }
    | TAN'('expr')' {$$ = tan($3); }
    | COT'('expr')' {$$ = 1/tan($3); }
    | COSEC'('expr')' {$$ = 1/sin($3); }
    | SEC'('expr')' {$$ = 1/cos($3); }
    | LOG'('expr')' {$$ = log($3); }
    | ASIN'('expr')' {$$ = asin($3); }
    | ACOS'('expr')' {$$ = acos($3); }
    | ATAN'('expr')' {$$ = atan($3); }
    | ACOT'('expr')' {$$ = 1/atan($3); }
    | ACOSEC'('expr')' {$$ = 1/asin($3); }
    | ASEC'('expr')' {$$ = 1/acos($3); }
    | SQRT'('expr')' {$$ = sqrt($3); }
    ;
    
%%

void yyerror(char *s) {
    fprintf(stderr, "Error: %s\n", s);
}

int main(void) {
    yyparse();
    return 0;
}
